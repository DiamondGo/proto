// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: chat.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Chatting_ChatStream_FullMethodName = "/service.Chatting/ChatStream"
	Chatting_Chat_FullMethodName       = "/service.Chatting/Chat"
)

// ChattingClient is the client API for Chatting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChattingClient interface {
	ChatStream(ctx context.Context, opts ...grpc.CallOption) (Chatting_ChatStreamClient, error)
	Chat(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageList, error)
}

type chattingClient struct {
	cc grpc.ClientConnInterface
}

func NewChattingClient(cc grpc.ClientConnInterface) ChattingClient {
	return &chattingClient{cc}
}

func (c *chattingClient) ChatStream(ctx context.Context, opts ...grpc.CallOption) (Chatting_ChatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chatting_ServiceDesc.Streams[0], Chatting_ChatStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chattingChatStreamClient{stream}
	return x, nil
}

type Chatting_ChatStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chattingChatStreamClient struct {
	grpc.ClientStream
}

func (x *chattingChatStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chattingChatStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chattingClient) Chat(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageList, error) {
	out := new(MessageList)
	err := c.cc.Invoke(ctx, Chatting_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChattingServer is the server API for Chatting service.
// All implementations must embed UnimplementedChattingServer
// for forward compatibility
type ChattingServer interface {
	ChatStream(Chatting_ChatStreamServer) error
	Chat(context.Context, *Message) (*MessageList, error)
	mustEmbedUnimplementedChattingServer()
}

// UnimplementedChattingServer must be embedded to have forward compatible implementations.
type UnimplementedChattingServer struct {
}

func (UnimplementedChattingServer) ChatStream(Chatting_ChatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatStream not implemented")
}
func (UnimplementedChattingServer) Chat(context.Context, *Message) (*MessageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChattingServer) mustEmbedUnimplementedChattingServer() {}

// UnsafeChattingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChattingServer will
// result in compilation errors.
type UnsafeChattingServer interface {
	mustEmbedUnimplementedChattingServer()
}

func RegisterChattingServer(s grpc.ServiceRegistrar, srv ChattingServer) {
	s.RegisterService(&Chatting_ServiceDesc, srv)
}

func _Chatting_ChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChattingServer).ChatStream(&chattingChatStreamServer{stream})
}

type Chatting_ChatStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chattingChatStreamServer struct {
	grpc.ServerStream
}

func (x *chattingChatStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chattingChatStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chatting_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChattingServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatting_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChattingServer).Chat(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// Chatting_ServiceDesc is the grpc.ServiceDesc for Chatting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chatting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Chatting",
	HandlerType: (*ChattingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _Chatting_Chat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatStream",
			Handler:       _Chatting_ChatStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
